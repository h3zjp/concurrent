// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_stream is a generated GoMock package.
package mock_stream

import (
	context "context"
	reflect "reflect"
	time "time"

	core "github.com/totegamma/concurrent/x/core"
	stream "github.com/totegamma/concurrent/x/stream"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Checkpoint mocks base method.
func (m *MockService) Checkpoint(ctx context.Context, stream string, item core.StreamItem, body interface{}, principal, requesterDomain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkpoint", ctx, stream, item, body, principal, requesterDomain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkpoint indicates an expected call of Checkpoint.
func (mr *MockServiceMockRecorder) Checkpoint(ctx, stream, item, body, principal, requesterDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkpoint", reflect.TypeOf((*MockService)(nil).Checkpoint), ctx, stream, item, body, principal, requesterDomain)
}

// Count mocks base method.
func (m *MockService) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServiceMockRecorder) Count(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockService)(nil).Count), ctx)
}

// CreateStream mocks base method.
func (m *MockService) CreateStream(ctx context.Context, stream core.Stream) (core.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, stream)
	ret0, _ := ret[0].(core.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockServiceMockRecorder) CreateStream(ctx, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockService)(nil).CreateStream), ctx, stream)
}

// DeleteStream mocks base method.
func (m *MockService) DeleteStream(ctx context.Context, streamID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStream", ctx, streamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStream indicates an expected call of DeleteStream.
func (mr *MockServiceMockRecorder) DeleteStream(ctx, streamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStream", reflect.TypeOf((*MockService)(nil).DeleteStream), ctx, streamID)
}

// DistributeEvent mocks base method.
func (m *MockService) DistributeEvent(ctx context.Context, stream string, event core.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributeEvent", ctx, stream, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeEvent indicates an expected call of DistributeEvent.
func (mr *MockServiceMockRecorder) DistributeEvent(ctx, stream, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeEvent", reflect.TypeOf((*MockService)(nil).DistributeEvent), ctx, stream, event)
}

// GetChunks mocks base method.
func (m *MockService) GetChunks(ctx context.Context, streams []string, pivot time.Time) (map[string]stream.Chunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunks", ctx, streams, pivot)
	ret0, _ := ret[0].(map[string]stream.Chunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunks indicates an expected call of GetChunks.
func (mr *MockServiceMockRecorder) GetChunks(ctx, streams, pivot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunks", reflect.TypeOf((*MockService)(nil).GetChunks), ctx, streams, pivot)
}

// GetChunksFromRemote mocks base method.
func (m *MockService) GetChunksFromRemote(ctx context.Context, host string, streams []string, pivot time.Time) (map[string]stream.Chunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunksFromRemote", ctx, host, streams, pivot)
	ret0, _ := ret[0].(map[string]stream.Chunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunksFromRemote indicates an expected call of GetChunksFromRemote.
func (mr *MockServiceMockRecorder) GetChunksFromRemote(ctx, host, streams, pivot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunksFromRemote", reflect.TypeOf((*MockService)(nil).GetChunksFromRemote), ctx, host, streams, pivot)
}

// GetImmediateItems mocks base method.
func (m *MockService) GetImmediateItems(ctx context.Context, streams []string, since time.Time, limit int) ([]core.StreamItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImmediateItems", ctx, streams, since, limit)
	ret0, _ := ret[0].([]core.StreamItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImmediateItems indicates an expected call of GetImmediateItems.
func (mr *MockServiceMockRecorder) GetImmediateItems(ctx, streams, since, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImmediateItems", reflect.TypeOf((*MockService)(nil).GetImmediateItems), ctx, streams, since, limit)
}

// GetItem mocks base method.
func (m *MockService) GetItem(ctx context.Context, stream, id string) (core.StreamItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, stream, id)
	ret0, _ := ret[0].(core.StreamItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockServiceMockRecorder) GetItem(ctx, stream, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockService)(nil).GetItem), ctx, stream, id)
}

// GetRecentItems mocks base method.
func (m *MockService) GetRecentItems(ctx context.Context, streams []string, until time.Time, limit int) ([]core.StreamItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentItems", ctx, streams, until, limit)
	ret0, _ := ret[0].([]core.StreamItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentItems indicates an expected call of GetRecentItems.
func (mr *MockServiceMockRecorder) GetRecentItems(ctx, streams, until, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentItems", reflect.TypeOf((*MockService)(nil).GetRecentItems), ctx, streams, until, limit)
}

// GetStream mocks base method.
func (m *MockService) GetStream(ctx context.Context, key string) (core.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStream", ctx, key)
	ret0, _ := ret[0].(core.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStream indicates an expected call of GetStream.
func (mr *MockServiceMockRecorder) GetStream(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStream", reflect.TypeOf((*MockService)(nil).GetStream), ctx, key)
}

// ListStreamByAuthor mocks base method.
func (m *MockService) ListStreamByAuthor(ctx context.Context, author string) ([]core.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamByAuthor", ctx, author)
	ret0, _ := ret[0].([]core.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamByAuthor indicates an expected call of ListStreamByAuthor.
func (mr *MockServiceMockRecorder) ListStreamByAuthor(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamByAuthor", reflect.TypeOf((*MockService)(nil).ListStreamByAuthor), ctx, author)
}

// ListStreamBySchema mocks base method.
func (m *MockService) ListStreamBySchema(ctx context.Context, schema string) ([]core.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamBySchema", ctx, schema)
	ret0, _ := ret[0].([]core.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamBySchema indicates an expected call of ListStreamBySchema.
func (mr *MockServiceMockRecorder) ListStreamBySchema(ctx, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamBySchema", reflect.TypeOf((*MockService)(nil).ListStreamBySchema), ctx, schema)
}

// ListStreamSubscriptions mocks base method.
func (m *MockService) ListStreamSubscriptions(ctx context.Context) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamSubscriptions", ctx)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamSubscriptions indicates an expected call of ListStreamSubscriptions.
func (mr *MockServiceMockRecorder) ListStreamSubscriptions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamSubscriptions", reflect.TypeOf((*MockService)(nil).ListStreamSubscriptions), ctx)
}

// PostItem mocks base method.
func (m *MockService) PostItem(ctx context.Context, stream string, item core.StreamItem, body interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostItem", ctx, stream, item, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostItem indicates an expected call of PostItem.
func (mr *MockServiceMockRecorder) PostItem(ctx, stream, item, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostItem", reflect.TypeOf((*MockService)(nil).PostItem), ctx, stream, item, body)
}

// PublishEventToLocal mocks base method.
func (m *MockService) PublishEventToLocal(ctx context.Context, event core.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEventToLocal", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEventToLocal indicates an expected call of PublishEventToLocal.
func (mr *MockServiceMockRecorder) PublishEventToLocal(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEventToLocal", reflect.TypeOf((*MockService)(nil).PublishEventToLocal), ctx, event)
}

// RemoveItem mocks base method.
func (m *MockService) RemoveItem(ctx context.Context, stream, id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveItem", ctx, stream, id)
}

// RemoveItem indicates an expected call of RemoveItem.
func (mr *MockServiceMockRecorder) RemoveItem(ctx, stream, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockService)(nil).RemoveItem), ctx, stream, id)
}

// UpdateStream mocks base method.
func (m *MockService) UpdateStream(ctx context.Context, stream core.Stream) (core.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStream", ctx, stream)
	ret0, _ := ret[0].(core.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStream indicates an expected call of UpdateStream.
func (mr *MockServiceMockRecorder) UpdateStream(ctx, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStream", reflect.TypeOf((*MockService)(nil).UpdateStream), ctx, stream)
}
