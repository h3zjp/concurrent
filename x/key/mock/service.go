// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_key is a generated GoMock package.
package mock_key

import (
	context "context"
	reflect "reflect"

	core "github.com/totegamma/concurrent/x/core"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// EnactKey mocks base method.
func (m *MockService) EnactKey(ctx context.Context, payload, signature string) (core.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnactKey", ctx, payload, signature)
	ret0, _ := ret[0].(core.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnactKey indicates an expected call of EnactKey.
func (mr *MockServiceMockRecorder) EnactKey(ctx, payload, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnactKey", reflect.TypeOf((*MockService)(nil).EnactKey), ctx, payload, signature)
}

// GetAllKeys mocks base method.
func (m *MockService) GetAllKeys(ctx context.Context, owner string) ([]core.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllKeys", ctx, owner)
	ret0, _ := ret[0].([]core.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllKeys indicates an expected call of GetAllKeys.
func (mr *MockServiceMockRecorder) GetAllKeys(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllKeys", reflect.TypeOf((*MockService)(nil).GetAllKeys), ctx, owner)
}

// GetKeyResolution mocks base method.
func (m *MockService) GetKeyResolution(ctx context.Context, keyID string) ([]core.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyResolution", ctx, keyID)
	ret0, _ := ret[0].([]core.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyResolution indicates an expected call of GetKeyResolution.
func (mr *MockServiceMockRecorder) GetKeyResolution(ctx, keyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyResolution", reflect.TypeOf((*MockService)(nil).GetKeyResolution), ctx, keyID)
}

// ResolveSubkey mocks base method.
func (m *MockService) ResolveSubkey(ctx context.Context, keyID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveSubkey", ctx, keyID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveSubkey indicates an expected call of ResolveSubkey.
func (mr *MockServiceMockRecorder) ResolveSubkey(ctx, keyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveSubkey", reflect.TypeOf((*MockService)(nil).ResolveSubkey), ctx, keyID)
}

// RevokeKey mocks base method.
func (m *MockService) RevokeKey(ctx context.Context, payload, signature string) (core.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeKey", ctx, payload, signature)
	ret0, _ := ret[0].(core.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeKey indicates an expected call of RevokeKey.
func (mr *MockServiceMockRecorder) RevokeKey(ctx, payload, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeKey", reflect.TypeOf((*MockService)(nil).RevokeKey), ctx, payload, signature)
}

// ValidateDocument mocks base method.
func (m *MockService) ValidateDocument(ctx context.Context, document, signature string, keys []core.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDocument", ctx, document, signature, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateDocument indicates an expected call of ValidateDocument.
func (mr *MockServiceMockRecorder) ValidateDocument(ctx, document, signature, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDocument", reflect.TypeOf((*MockService)(nil).ValidateDocument), ctx, document, signature, keys)
}
