// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock/services.go
//

// Package mock_core is a generated GoMock package.
package mock_core

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	websocket "github.com/gorilla/websocket"
	echo "github.com/labstack/echo/v4"
	core "github.com/totegamma/concurrent/core"
	gomock "go.uber.org/mock/gomock"
)

// MockAckService is a mock of AckService interface.
type MockAckService struct {
	ctrl     *gomock.Controller
	recorder *MockAckServiceMockRecorder
}

// MockAckServiceMockRecorder is the mock recorder for MockAckService.
type MockAckServiceMockRecorder struct {
	mock *MockAckService
}

// NewMockAckService creates a new mock instance.
func NewMockAckService(ctrl *gomock.Controller) *MockAckService {
	mock := &MockAckService{ctrl: ctrl}
	mock.recorder = &MockAckServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAckService) EXPECT() *MockAckServiceMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockAckService) Ack(ctx context.Context, mode core.CommitMode, document, signature string) (core.Ack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", ctx, mode, document, signature)
	ret0, _ := ret[0].(core.Ack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ack indicates an expected call of Ack.
func (mr *MockAckServiceMockRecorder) Ack(ctx, mode, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockAckService)(nil).Ack), ctx, mode, document, signature)
}

// GetAcker mocks base method.
func (m *MockAckService) GetAcker(ctx context.Context, key string) ([]core.Ack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcker", ctx, key)
	ret0, _ := ret[0].([]core.Ack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAcker indicates an expected call of GetAcker.
func (mr *MockAckServiceMockRecorder) GetAcker(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcker", reflect.TypeOf((*MockAckService)(nil).GetAcker), ctx, key)
}

// GetAcking mocks base method.
func (m *MockAckService) GetAcking(ctx context.Context, key string) ([]core.Ack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcking", ctx, key)
	ret0, _ := ret[0].([]core.Ack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAcking indicates an expected call of GetAcking.
func (mr *MockAckServiceMockRecorder) GetAcking(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcking", reflect.TypeOf((*MockAckService)(nil).GetAcking), ctx, key)
}

// MockAgentService is a mock of AgentService interface.
type MockAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentServiceMockRecorder
}

// MockAgentServiceMockRecorder is the mock recorder for MockAgentService.
type MockAgentServiceMockRecorder struct {
	mock *MockAgentService
}

// NewMockAgentService creates a new mock instance.
func NewMockAgentService(ctrl *gomock.Controller) *MockAgentService {
	mock := &MockAgentService{ctrl: ctrl}
	mock.recorder = &MockAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentService) EXPECT() *MockAgentServiceMockRecorder {
	return m.recorder
}

// Boot mocks base method.
func (m *MockAgentService) Boot() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Boot")
}

// Boot indicates an expected call of Boot.
func (mr *MockAgentServiceMockRecorder) Boot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Boot", reflect.TypeOf((*MockAgentService)(nil).Boot))
}

// MockAssociationService is a mock of AssociationService interface.
type MockAssociationService struct {
	ctrl     *gomock.Controller
	recorder *MockAssociationServiceMockRecorder
}

// MockAssociationServiceMockRecorder is the mock recorder for MockAssociationService.
type MockAssociationServiceMockRecorder struct {
	mock *MockAssociationService
}

// NewMockAssociationService creates a new mock instance.
func NewMockAssociationService(ctrl *gomock.Controller) *MockAssociationService {
	mock := &MockAssociationService{ctrl: ctrl}
	mock.recorder = &MockAssociationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssociationService) EXPECT() *MockAssociationServiceMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockAssociationService) Clean(ctx context.Context, ccid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", ctx, ccid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockAssociationServiceMockRecorder) Clean(ctx, ccid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockAssociationService)(nil).Clean), ctx, ccid)
}

// Count mocks base method.
func (m *MockAssociationService) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockAssociationServiceMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockAssociationService)(nil).Count), ctx)
}

// Create mocks base method.
func (m *MockAssociationService) Create(ctx context.Context, mode core.CommitMode, document, signature string) (core.Association, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, mode, document, signature)
	ret0, _ := ret[0].(core.Association)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockAssociationServiceMockRecorder) Create(ctx, mode, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAssociationService)(nil).Create), ctx, mode, document, signature)
}

// Delete mocks base method.
func (m *MockAssociationService) Delete(ctx context.Context, mode core.CommitMode, document, signature string) (core.Association, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, mode, document, signature)
	ret0, _ := ret[0].(core.Association)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delete indicates an expected call of Delete.
func (mr *MockAssociationServiceMockRecorder) Delete(ctx, mode, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAssociationService)(nil).Delete), ctx, mode, document, signature)
}

// Get mocks base method.
func (m *MockAssociationService) Get(ctx context.Context, id string) (core.Association, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(core.Association)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAssociationServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAssociationService)(nil).Get), ctx, id)
}

// GetBySchema mocks base method.
func (m *MockAssociationService) GetBySchema(ctx context.Context, messageID, schema string) ([]core.Association, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySchema", ctx, messageID, schema)
	ret0, _ := ret[0].([]core.Association)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySchema indicates an expected call of GetBySchema.
func (mr *MockAssociationServiceMockRecorder) GetBySchema(ctx, messageID, schema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySchema", reflect.TypeOf((*MockAssociationService)(nil).GetBySchema), ctx, messageID, schema)
}

// GetBySchemaAndVariant mocks base method.
func (m *MockAssociationService) GetBySchemaAndVariant(ctx context.Context, messageID, schema, variant string) ([]core.Association, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySchemaAndVariant", ctx, messageID, schema, variant)
	ret0, _ := ret[0].([]core.Association)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySchemaAndVariant indicates an expected call of GetBySchemaAndVariant.
func (mr *MockAssociationServiceMockRecorder) GetBySchemaAndVariant(ctx, messageID, schema, variant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySchemaAndVariant", reflect.TypeOf((*MockAssociationService)(nil).GetBySchemaAndVariant), ctx, messageID, schema, variant)
}

// GetByTarget mocks base method.
func (m *MockAssociationService) GetByTarget(ctx context.Context, targetID string) ([]core.Association, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTarget", ctx, targetID)
	ret0, _ := ret[0].([]core.Association)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTarget indicates an expected call of GetByTarget.
func (mr *MockAssociationServiceMockRecorder) GetByTarget(ctx, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTarget", reflect.TypeOf((*MockAssociationService)(nil).GetByTarget), ctx, targetID)
}

// GetCountsBySchema mocks base method.
func (m *MockAssociationService) GetCountsBySchema(ctx context.Context, messageID string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountsBySchema", ctx, messageID)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountsBySchema indicates an expected call of GetCountsBySchema.
func (mr *MockAssociationServiceMockRecorder) GetCountsBySchema(ctx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountsBySchema", reflect.TypeOf((*MockAssociationService)(nil).GetCountsBySchema), ctx, messageID)
}

// GetCountsBySchemaAndVariant mocks base method.
func (m *MockAssociationService) GetCountsBySchemaAndVariant(ctx context.Context, messageID, schema string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountsBySchemaAndVariant", ctx, messageID, schema)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountsBySchemaAndVariant indicates an expected call of GetCountsBySchemaAndVariant.
func (mr *MockAssociationServiceMockRecorder) GetCountsBySchemaAndVariant(ctx, messageID, schema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountsBySchemaAndVariant", reflect.TypeOf((*MockAssociationService)(nil).GetCountsBySchemaAndVariant), ctx, messageID, schema)
}

// GetOwn mocks base method.
func (m *MockAssociationService) GetOwn(ctx context.Context, author string) ([]core.Association, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwn", ctx, author)
	ret0, _ := ret[0].([]core.Association)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwn indicates an expected call of GetOwn.
func (mr *MockAssociationServiceMockRecorder) GetOwn(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwn", reflect.TypeOf((*MockAssociationService)(nil).GetOwn), ctx, author)
}

// GetOwnByTarget mocks base method.
func (m *MockAssociationService) GetOwnByTarget(ctx context.Context, targetID, author string) ([]core.Association, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnByTarget", ctx, targetID, author)
	ret0, _ := ret[0].([]core.Association)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnByTarget indicates an expected call of GetOwnByTarget.
func (mr *MockAssociationServiceMockRecorder) GetOwnByTarget(ctx, targetID, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnByTarget", reflect.TypeOf((*MockAssociationService)(nil).GetOwnByTarget), ctx, targetID, author)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// IdentifyIdentity mocks base method.
func (m *MockAuthService) IdentifyIdentity(next echo.HandlerFunc) echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdentifyIdentity", next)
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// IdentifyIdentity indicates an expected call of IdentifyIdentity.
func (mr *MockAuthServiceMockRecorder) IdentifyIdentity(next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentifyIdentity", reflect.TypeOf((*MockAuthService)(nil).IdentifyIdentity), next)
}

// IssuePassport mocks base method.
func (m *MockAuthService) IssuePassport(ctx context.Context, requester string, key []core.Key) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuePassport", ctx, requester, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssuePassport indicates an expected call of IssuePassport.
func (mr *MockAuthServiceMockRecorder) IssuePassport(ctx, requester, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuePassport", reflect.TypeOf((*MockAuthService)(nil).IssuePassport), ctx, requester, key)
}

// RateLimiter mocks base method.
func (m *MockAuthService) RateLimiter(configMap core.RateLimitConfigMap) echo.MiddlewareFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateLimiter", configMap)
	ret0, _ := ret[0].(echo.MiddlewareFunc)
	return ret0
}

// RateLimiter indicates an expected call of RateLimiter.
func (mr *MockAuthServiceMockRecorder) RateLimiter(configMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateLimiter", reflect.TypeOf((*MockAuthService)(nil).RateLimiter), configMap)
}

// MockDomainService is a mock of DomainService interface.
type MockDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServiceMockRecorder
}

// MockDomainServiceMockRecorder is the mock recorder for MockDomainService.
type MockDomainServiceMockRecorder struct {
	mock *MockDomainService
}

// NewMockDomainService creates a new mock instance.
func NewMockDomainService(ctrl *gomock.Controller) *MockDomainService {
	mock := &MockDomainService{ctrl: ctrl}
	mock.recorder = &MockDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainService) EXPECT() *MockDomainServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDomainService) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDomainServiceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDomainService)(nil).Delete), ctx, id)
}

// ForceFetch mocks base method.
func (m *MockDomainService) ForceFetch(ctx context.Context, fqdn string) (core.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceFetch", ctx, fqdn)
	ret0, _ := ret[0].(core.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceFetch indicates an expected call of ForceFetch.
func (mr *MockDomainServiceMockRecorder) ForceFetch(ctx, fqdn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceFetch", reflect.TypeOf((*MockDomainService)(nil).ForceFetch), ctx, fqdn)
}

// Get mocks base method.
func (m *MockDomainService) Get(ctx context.Context, key string) (core.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(core.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDomainServiceMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDomainService)(nil).Get), ctx, key)
}

// GetByCCID mocks base method.
func (m *MockDomainService) GetByCCID(ctx context.Context, key string) (core.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCCID", ctx, key)
	ret0, _ := ret[0].(core.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCCID indicates an expected call of GetByCCID.
func (mr *MockDomainServiceMockRecorder) GetByCCID(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCCID", reflect.TypeOf((*MockDomainService)(nil).GetByCCID), ctx, key)
}

// GetByFQDN mocks base method.
func (m *MockDomainService) GetByFQDN(ctx context.Context, key string) (core.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFQDN", ctx, key)
	ret0, _ := ret[0].(core.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFQDN indicates an expected call of GetByFQDN.
func (mr *MockDomainServiceMockRecorder) GetByFQDN(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFQDN", reflect.TypeOf((*MockDomainService)(nil).GetByFQDN), ctx, key)
}

// List mocks base method.
func (m *MockDomainService) List(ctx context.Context) ([]core.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]core.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDomainServiceMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDomainService)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockDomainService) Update(ctx context.Context, host core.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDomainServiceMockRecorder) Update(ctx, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDomainService)(nil).Update), ctx, host)
}

// UpdateScrapeTime mocks base method.
func (m *MockDomainService) UpdateScrapeTime(ctx context.Context, id string, scrapeTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScrapeTime", ctx, id, scrapeTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScrapeTime indicates an expected call of UpdateScrapeTime.
func (mr *MockDomainServiceMockRecorder) UpdateScrapeTime(ctx, id, scrapeTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScrapeTime", reflect.TypeOf((*MockDomainService)(nil).UpdateScrapeTime), ctx, id, scrapeTime)
}

// Upsert mocks base method.
func (m *MockDomainService) Upsert(ctx context.Context, host core.Domain) (core.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, host)
	ret0, _ := ret[0].(core.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockDomainServiceMockRecorder) Upsert(ctx, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockDomainService)(nil).Upsert), ctx, host)
}

// MockEntityService is a mock of EntityService interface.
type MockEntityService struct {
	ctrl     *gomock.Controller
	recorder *MockEntityServiceMockRecorder
}

// MockEntityServiceMockRecorder is the mock recorder for MockEntityService.
type MockEntityServiceMockRecorder struct {
	mock *MockEntityService
}

// NewMockEntityService creates a new mock instance.
func NewMockEntityService(ctrl *gomock.Controller) *MockEntityService {
	mock := &MockEntityService{ctrl: ctrl}
	mock.recorder = &MockEntityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityService) EXPECT() *MockEntityServiceMockRecorder {
	return m.recorder
}

// Affiliation mocks base method.
func (m *MockEntityService) Affiliation(ctx context.Context, mode core.CommitMode, document, signature, meta string) (core.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Affiliation", ctx, mode, document, signature, meta)
	ret0, _ := ret[0].(core.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Affiliation indicates an expected call of Affiliation.
func (mr *MockEntityServiceMockRecorder) Affiliation(ctx, mode, document, signature, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Affiliation", reflect.TypeOf((*MockEntityService)(nil).Affiliation), ctx, mode, document, signature, meta)
}

// Clean mocks base method.
func (m *MockEntityService) Clean(ctx context.Context, ccid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", ctx, ccid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockEntityServiceMockRecorder) Clean(ctx, ccid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockEntityService)(nil).Clean), ctx, ccid)
}

// Count mocks base method.
func (m *MockEntityService) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockEntityServiceMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockEntityService)(nil).Count), ctx)
}

// Delete mocks base method.
func (m *MockEntityService) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEntityServiceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEntityService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockEntityService) Get(ctx context.Context, ccid string) (core.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ccid)
	ret0, _ := ret[0].(core.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEntityServiceMockRecorder) Get(ctx, ccid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEntityService)(nil).Get), ctx, ccid)
}

// GetByAlias mocks base method.
func (m *MockEntityService) GetByAlias(ctx context.Context, alias string) (core.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAlias", ctx, alias)
	ret0, _ := ret[0].(core.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAlias indicates an expected call of GetByAlias.
func (mr *MockEntityServiceMockRecorder) GetByAlias(ctx, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAlias", reflect.TypeOf((*MockEntityService)(nil).GetByAlias), ctx, alias)
}

// GetMeta mocks base method.
func (m *MockEntityService) GetMeta(ctx context.Context, ccid string) (core.EntityMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta", ctx, ccid)
	ret0, _ := ret[0].(core.EntityMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockEntityServiceMockRecorder) GetMeta(ctx, ccid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockEntityService)(nil).GetMeta), ctx, ccid)
}

// GetWithHint mocks base method.
func (m *MockEntityService) GetWithHint(ctx context.Context, ccid, hint string) (core.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithHint", ctx, ccid, hint)
	ret0, _ := ret[0].(core.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithHint indicates an expected call of GetWithHint.
func (mr *MockEntityServiceMockRecorder) GetWithHint(ctx, ccid, hint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithHint", reflect.TypeOf((*MockEntityService)(nil).GetWithHint), ctx, ccid, hint)
}

// IsUserExists mocks base method.
func (m *MockEntityService) IsUserExists(ctx context.Context, user string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExists", ctx, user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserExists indicates an expected call of IsUserExists.
func (mr *MockEntityServiceMockRecorder) IsUserExists(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExists", reflect.TypeOf((*MockEntityService)(nil).IsUserExists), ctx, user)
}

// List mocks base method.
func (m *MockEntityService) List(ctx context.Context) ([]core.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]core.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEntityServiceMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEntityService)(nil).List), ctx)
}

// PullEntityFromRemote mocks base method.
func (m *MockEntityService) PullEntityFromRemote(ctx context.Context, id, domain string) (core.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullEntityFromRemote", ctx, id, domain)
	ret0, _ := ret[0].(core.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullEntityFromRemote indicates an expected call of PullEntityFromRemote.
func (mr *MockEntityServiceMockRecorder) PullEntityFromRemote(ctx, id, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullEntityFromRemote", reflect.TypeOf((*MockEntityService)(nil).PullEntityFromRemote), ctx, id, domain)
}

// Tombstone mocks base method.
func (m *MockEntityService) Tombstone(ctx context.Context, mode core.CommitMode, document, signature string) (core.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tombstone", ctx, mode, document, signature)
	ret0, _ := ret[0].(core.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tombstone indicates an expected call of Tombstone.
func (mr *MockEntityServiceMockRecorder) Tombstone(ctx, mode, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tombstone", reflect.TypeOf((*MockEntityService)(nil).Tombstone), ctx, mode, document, signature)
}

// UpdateScore mocks base method.
func (m *MockEntityService) UpdateScore(ctx context.Context, id string, score int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScore", ctx, id, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScore indicates an expected call of UpdateScore.
func (mr *MockEntityServiceMockRecorder) UpdateScore(ctx, id, score any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScore", reflect.TypeOf((*MockEntityService)(nil).UpdateScore), ctx, id, score)
}

// UpdateTag mocks base method.
func (m *MockEntityService) UpdateTag(ctx context.Context, id, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", ctx, id, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockEntityServiceMockRecorder) UpdateTag(ctx, id, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockEntityService)(nil).UpdateTag), ctx, id, tag)
}

// MockKeyService is a mock of KeyService interface.
type MockKeyService struct {
	ctrl     *gomock.Controller
	recorder *MockKeyServiceMockRecorder
}

// MockKeyServiceMockRecorder is the mock recorder for MockKeyService.
type MockKeyServiceMockRecorder struct {
	mock *MockKeyService
}

// NewMockKeyService creates a new mock instance.
func NewMockKeyService(ctrl *gomock.Controller) *MockKeyService {
	mock := &MockKeyService{ctrl: ctrl}
	mock.recorder = &MockKeyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyService) EXPECT() *MockKeyServiceMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockKeyService) Clean(ctx context.Context, ccid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", ctx, ccid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockKeyServiceMockRecorder) Clean(ctx, ccid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockKeyService)(nil).Clean), ctx, ccid)
}

// Enact mocks base method.
func (m *MockKeyService) Enact(ctx context.Context, mode core.CommitMode, payload, signature string) (core.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enact", ctx, mode, payload, signature)
	ret0, _ := ret[0].(core.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enact indicates an expected call of Enact.
func (mr *MockKeyServiceMockRecorder) Enact(ctx, mode, payload, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enact", reflect.TypeOf((*MockKeyService)(nil).Enact), ctx, mode, payload, signature)
}

// GetAllKeys mocks base method.
func (m *MockKeyService) GetAllKeys(ctx context.Context, owner string) ([]core.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllKeys", ctx, owner)
	ret0, _ := ret[0].([]core.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllKeys indicates an expected call of GetAllKeys.
func (mr *MockKeyServiceMockRecorder) GetAllKeys(ctx, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllKeys", reflect.TypeOf((*MockKeyService)(nil).GetAllKeys), ctx, owner)
}

// GetKeyResolution mocks base method.
func (m *MockKeyService) GetKeyResolution(ctx context.Context, keyID string) ([]core.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyResolution", ctx, keyID)
	ret0, _ := ret[0].([]core.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyResolution indicates an expected call of GetKeyResolution.
func (mr *MockKeyServiceMockRecorder) GetKeyResolution(ctx, keyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyResolution", reflect.TypeOf((*MockKeyService)(nil).GetKeyResolution), ctx, keyID)
}

// GetRemoteKeyResolution mocks base method.
func (m *MockKeyService) GetRemoteKeyResolution(ctx context.Context, remote, keyID string) ([]core.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteKeyResolution", ctx, remote, keyID)
	ret0, _ := ret[0].([]core.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteKeyResolution indicates an expected call of GetRemoteKeyResolution.
func (mr *MockKeyServiceMockRecorder) GetRemoteKeyResolution(ctx, remote, keyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteKeyResolution", reflect.TypeOf((*MockKeyService)(nil).GetRemoteKeyResolution), ctx, remote, keyID)
}

// ResolveSubkey mocks base method.
func (m *MockKeyService) ResolveSubkey(ctx context.Context, keyID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveSubkey", ctx, keyID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveSubkey indicates an expected call of ResolveSubkey.
func (mr *MockKeyServiceMockRecorder) ResolveSubkey(ctx, keyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveSubkey", reflect.TypeOf((*MockKeyService)(nil).ResolveSubkey), ctx, keyID)
}

// Revoke mocks base method.
func (m *MockKeyService) Revoke(ctx context.Context, mode core.CommitMode, payload, signature string) (core.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ctx, mode, payload, signature)
	ret0, _ := ret[0].(core.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoke indicates an expected call of Revoke.
func (mr *MockKeyServiceMockRecorder) Revoke(ctx, mode, payload, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockKeyService)(nil).Revoke), ctx, mode, payload, signature)
}

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockMessageService) Clean(ctx context.Context, ccid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", ctx, ccid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockMessageServiceMockRecorder) Clean(ctx, ccid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockMessageService)(nil).Clean), ctx, ccid)
}

// Count mocks base method.
func (m *MockMessageService) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockMessageServiceMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockMessageService)(nil).Count), ctx)
}

// Create mocks base method.
func (m *MockMessageService) Create(ctx context.Context, mode core.CommitMode, document, signature string) (core.Message, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, mode, document, signature)
	ret0, _ := ret[0].(core.Message)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockMessageServiceMockRecorder) Create(ctx, mode, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageService)(nil).Create), ctx, mode, document, signature)
}

// Delete mocks base method.
func (m *MockMessageService) Delete(ctx context.Context, mode core.CommitMode, document, signature string) (core.Message, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, mode, document, signature)
	ret0, _ := ret[0].(core.Message)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageServiceMockRecorder) Delete(ctx, mode, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageService)(nil).Delete), ctx, mode, document, signature)
}

// GetAsGuest mocks base method.
func (m *MockMessageService) GetAsGuest(ctx context.Context, id string) (core.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsGuest", ctx, id)
	ret0, _ := ret[0].(core.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsGuest indicates an expected call of GetAsGuest.
func (mr *MockMessageServiceMockRecorder) GetAsGuest(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsGuest", reflect.TypeOf((*MockMessageService)(nil).GetAsGuest), ctx, id)
}

// GetAsUser mocks base method.
func (m *MockMessageService) GetAsUser(ctx context.Context, id string, requester core.Entity) (core.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsUser", ctx, id, requester)
	ret0, _ := ret[0].(core.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsUser indicates an expected call of GetAsUser.
func (mr *MockMessageServiceMockRecorder) GetAsUser(ctx, id, requester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsUser", reflect.TypeOf((*MockMessageService)(nil).GetAsUser), ctx, id, requester)
}

// GetWithOwnAssociations mocks base method.
func (m *MockMessageService) GetWithOwnAssociations(ctx context.Context, id, requester string) (core.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithOwnAssociations", ctx, id, requester)
	ret0, _ := ret[0].(core.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithOwnAssociations indicates an expected call of GetWithOwnAssociations.
func (mr *MockMessageServiceMockRecorder) GetWithOwnAssociations(ctx, id, requester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithOwnAssociations", reflect.TypeOf((*MockMessageService)(nil).GetWithOwnAssociations), ctx, id, requester)
}

// MockPolicyService is a mock of PolicyService interface.
type MockPolicyService struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyServiceMockRecorder
}

// MockPolicyServiceMockRecorder is the mock recorder for MockPolicyService.
type MockPolicyServiceMockRecorder struct {
	mock *MockPolicyService
}

// NewMockPolicyService creates a new mock instance.
func NewMockPolicyService(ctrl *gomock.Controller) *MockPolicyService {
	mock := &MockPolicyService{ctrl: ctrl}
	mock.recorder = &MockPolicyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyService) EXPECT() *MockPolicyServiceMockRecorder {
	return m.recorder
}

// AccumulateOr mocks base method.
func (m *MockPolicyService) AccumulateOr(results []core.PolicyEvalResult, action string, override *map[string]bool) core.PolicyEvalResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccumulateOr", results, action, override)
	ret0, _ := ret[0].(core.PolicyEvalResult)
	return ret0
}

// AccumulateOr indicates an expected call of AccumulateOr.
func (mr *MockPolicyServiceMockRecorder) AccumulateOr(results, action, override any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccumulateOr", reflect.TypeOf((*MockPolicyService)(nil).AccumulateOr), results, action, override)
}

// Summerize mocks base method.
func (m *MockPolicyService) Summerize(results []core.PolicyEvalResult, action string, overrides *map[string]bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summerize", results, action, overrides)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Summerize indicates an expected call of Summerize.
func (mr *MockPolicyServiceMockRecorder) Summerize(results, action, overrides any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summerize", reflect.TypeOf((*MockPolicyService)(nil).Summerize), results, action, overrides)
}

// Test mocks base method.
func (m *MockPolicyService) Test(ctx context.Context, policy core.Policy, context core.RequestContext, action string) (core.PolicyEvalResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Test", ctx, policy, context, action)
	ret0, _ := ret[0].(core.PolicyEvalResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Test indicates an expected call of Test.
func (mr *MockPolicyServiceMockRecorder) Test(ctx, policy, context, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockPolicyService)(nil).Test), ctx, policy, context, action)
}

// TestWithGlobalPolicy mocks base method.
func (m *MockPolicyService) TestWithGlobalPolicy(ctx context.Context, context core.RequestContext, action string) (core.PolicyEvalResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestWithGlobalPolicy", ctx, context, action)
	ret0, _ := ret[0].(core.PolicyEvalResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestWithGlobalPolicy indicates an expected call of TestWithGlobalPolicy.
func (mr *MockPolicyServiceMockRecorder) TestWithGlobalPolicy(ctx, context, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestWithGlobalPolicy", reflect.TypeOf((*MockPolicyService)(nil).TestWithGlobalPolicy), ctx, context, action)
}

// TestWithPolicyURL mocks base method.
func (m *MockPolicyService) TestWithPolicyURL(ctx context.Context, url string, context core.RequestContext, action string) (core.PolicyEvalResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestWithPolicyURL", ctx, url, context, action)
	ret0, _ := ret[0].(core.PolicyEvalResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestWithPolicyURL indicates an expected call of TestWithPolicyURL.
func (mr *MockPolicyServiceMockRecorder) TestWithPolicyURL(ctx, url, context, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestWithPolicyURL", reflect.TypeOf((*MockPolicyService)(nil).TestWithPolicyURL), ctx, url, context, action)
}

// MockProfileService is a mock of ProfileService interface.
type MockProfileService struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceMockRecorder
}

// MockProfileServiceMockRecorder is the mock recorder for MockProfileService.
type MockProfileServiceMockRecorder struct {
	mock *MockProfileService
}

// NewMockProfileService creates a new mock instance.
func NewMockProfileService(ctrl *gomock.Controller) *MockProfileService {
	mock := &MockProfileService{ctrl: ctrl}
	mock.recorder = &MockProfileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileService) EXPECT() *MockProfileServiceMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockProfileService) Clean(ctx context.Context, ccid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", ctx, ccid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockProfileServiceMockRecorder) Clean(ctx, ccid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockProfileService)(nil).Clean), ctx, ccid)
}

// Count mocks base method.
func (m *MockProfileService) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockProfileServiceMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockProfileService)(nil).Count), ctx)
}

// Delete mocks base method.
func (m *MockProfileService) Delete(ctx context.Context, mode core.CommitMode, document string) (core.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, mode, document)
	ret0, _ := ret[0].(core.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProfileServiceMockRecorder) Delete(ctx, mode, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProfileService)(nil).Delete), ctx, mode, document)
}

// Get mocks base method.
func (m *MockProfileService) Get(ctx context.Context, id string) (core.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(core.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProfileServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProfileService)(nil).Get), ctx, id)
}

// GetByAuthor mocks base method.
func (m *MockProfileService) GetByAuthor(ctx context.Context, owner string) ([]core.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAuthor", ctx, owner)
	ret0, _ := ret[0].([]core.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthor indicates an expected call of GetByAuthor.
func (mr *MockProfileServiceMockRecorder) GetByAuthor(ctx, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthor", reflect.TypeOf((*MockProfileService)(nil).GetByAuthor), ctx, owner)
}

// GetByAuthorAndSchema mocks base method.
func (m *MockProfileService) GetByAuthorAndSchema(ctx context.Context, owner, schema string) ([]core.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAuthorAndSchema", ctx, owner, schema)
	ret0, _ := ret[0].([]core.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthorAndSchema indicates an expected call of GetByAuthorAndSchema.
func (mr *MockProfileServiceMockRecorder) GetByAuthorAndSchema(ctx, owner, schema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthorAndSchema", reflect.TypeOf((*MockProfileService)(nil).GetByAuthorAndSchema), ctx, owner, schema)
}

// GetBySchema mocks base method.
func (m *MockProfileService) GetBySchema(ctx context.Context, schema string) ([]core.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySchema", ctx, schema)
	ret0, _ := ret[0].([]core.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySchema indicates an expected call of GetBySchema.
func (mr *MockProfileServiceMockRecorder) GetBySchema(ctx, schema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySchema", reflect.TypeOf((*MockProfileService)(nil).GetBySchema), ctx, schema)
}

// GetBySemanticID mocks base method.
func (m *MockProfileService) GetBySemanticID(ctx context.Context, semanticID, owner string) (core.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySemanticID", ctx, semanticID, owner)
	ret0, _ := ret[0].(core.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySemanticID indicates an expected call of GetBySemanticID.
func (mr *MockProfileServiceMockRecorder) GetBySemanticID(ctx, semanticID, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySemanticID", reflect.TypeOf((*MockProfileService)(nil).GetBySemanticID), ctx, semanticID, owner)
}

// Upsert mocks base method.
func (m *MockProfileService) Upsert(ctx context.Context, mode core.CommitMode, document, signature string) (core.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, mode, document, signature)
	ret0, _ := ret[0].(core.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockProfileServiceMockRecorder) Upsert(ctx, mode, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockProfileService)(nil).Upsert), ctx, mode, document, signature)
}

// MockSchemaService is a mock of SchemaService interface.
type MockSchemaService struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaServiceMockRecorder
}

// MockSchemaServiceMockRecorder is the mock recorder for MockSchemaService.
type MockSchemaServiceMockRecorder struct {
	mock *MockSchemaService
}

// NewMockSchemaService creates a new mock instance.
func NewMockSchemaService(ctrl *gomock.Controller) *MockSchemaService {
	mock := &MockSchemaService{ctrl: ctrl}
	mock.recorder = &MockSchemaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaService) EXPECT() *MockSchemaServiceMockRecorder {
	return m.recorder
}

// IDToUrl mocks base method.
func (m *MockSchemaService) IDToUrl(ctx context.Context, id uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDToUrl", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IDToUrl indicates an expected call of IDToUrl.
func (mr *MockSchemaServiceMockRecorder) IDToUrl(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDToUrl", reflect.TypeOf((*MockSchemaService)(nil).IDToUrl), ctx, id)
}

// UrlToID mocks base method.
func (m *MockSchemaService) UrlToID(ctx context.Context, url string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UrlToID", ctx, url)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UrlToID indicates an expected call of UrlToID.
func (mr *MockSchemaServiceMockRecorder) UrlToID(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UrlToID", reflect.TypeOf((*MockSchemaService)(nil).UrlToID), ctx, url)
}

// MockSemanticIDService is a mock of SemanticIDService interface.
type MockSemanticIDService struct {
	ctrl     *gomock.Controller
	recorder *MockSemanticIDServiceMockRecorder
}

// MockSemanticIDServiceMockRecorder is the mock recorder for MockSemanticIDService.
type MockSemanticIDServiceMockRecorder struct {
	mock *MockSemanticIDService
}

// NewMockSemanticIDService creates a new mock instance.
func NewMockSemanticIDService(ctrl *gomock.Controller) *MockSemanticIDService {
	mock := &MockSemanticIDService{ctrl: ctrl}
	mock.recorder = &MockSemanticIDServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSemanticIDService) EXPECT() *MockSemanticIDServiceMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockSemanticIDService) Clean(ctx context.Context, ccid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", ctx, ccid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockSemanticIDServiceMockRecorder) Clean(ctx, ccid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockSemanticIDService)(nil).Clean), ctx, ccid)
}

// Delete mocks base method.
func (m *MockSemanticIDService) Delete(ctx context.Context, id, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSemanticIDServiceMockRecorder) Delete(ctx, id, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSemanticIDService)(nil).Delete), ctx, id, owner)
}

// Lookup mocks base method.
func (m *MockSemanticIDService) Lookup(ctx context.Context, id, owner string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", ctx, id, owner)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockSemanticIDServiceMockRecorder) Lookup(ctx, id, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockSemanticIDService)(nil).Lookup), ctx, id, owner)
}

// Name mocks base method.
func (m *MockSemanticIDService) Name(ctx context.Context, id, owner, target, document, signature string) (core.SemanticID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name", ctx, id, owner, target, document, signature)
	ret0, _ := ret[0].(core.SemanticID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockSemanticIDServiceMockRecorder) Name(ctx, id, owner, target, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSemanticIDService)(nil).Name), ctx, id, owner, target, document, signature)
}

// MockSocketManager is a mock of SocketManager interface.
type MockSocketManager struct {
	ctrl     *gomock.Controller
	recorder *MockSocketManagerMockRecorder
}

// MockSocketManagerMockRecorder is the mock recorder for MockSocketManager.
type MockSocketManagerMockRecorder struct {
	mock *MockSocketManager
}

// NewMockSocketManager creates a new mock instance.
func NewMockSocketManager(ctrl *gomock.Controller) *MockSocketManager {
	mock := &MockSocketManager{ctrl: ctrl}
	mock.recorder = &MockSocketManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSocketManager) EXPECT() *MockSocketManagerMockRecorder {
	return m.recorder
}

// GetAllRemoteSubs mocks base method.
func (m *MockSocketManager) GetAllRemoteSubs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRemoteSubs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllRemoteSubs indicates an expected call of GetAllRemoteSubs.
func (mr *MockSocketManagerMockRecorder) GetAllRemoteSubs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRemoteSubs", reflect.TypeOf((*MockSocketManager)(nil).GetAllRemoteSubs))
}

// Subscribe mocks base method.
func (m *MockSocketManager) Subscribe(conn *websocket.Conn, timelines []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", conn, timelines)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSocketManagerMockRecorder) Subscribe(conn, timelines any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSocketManager)(nil).Subscribe), conn, timelines)
}

// Unsubscribe mocks base method.
func (m *MockSocketManager) Unsubscribe(conn *websocket.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", conn)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSocketManagerMockRecorder) Unsubscribe(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSocketManager)(nil).Unsubscribe), conn)
}

// MockStoreService is a mock of StoreService interface.
type MockStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockStoreServiceMockRecorder
}

// MockStoreServiceMockRecorder is the mock recorder for MockStoreService.
type MockStoreServiceMockRecorder struct {
	mock *MockStoreService
}

// NewMockStoreService creates a new mock instance.
func NewMockStoreService(ctrl *gomock.Controller) *MockStoreService {
	mock := &MockStoreService{ctrl: ctrl}
	mock.recorder = &MockStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreService) EXPECT() *MockStoreServiceMockRecorder {
	return m.recorder
}

// CleanUserAllData mocks base method.
func (m *MockStoreService) CleanUserAllData(ctx context.Context, target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUserAllData", ctx, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUserAllData indicates an expected call of CleanUserAllData.
func (mr *MockStoreServiceMockRecorder) CleanUserAllData(ctx, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUserAllData", reflect.TypeOf((*MockStoreService)(nil).CleanUserAllData), ctx, target)
}

// Commit mocks base method.
func (m *MockStoreService) Commit(ctx context.Context, mode core.CommitMode, document, signature, option string, keys []core.Key, IP string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, mode, document, signature, option, keys, IP)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockStoreServiceMockRecorder) Commit(ctx, mode, document, signature, option, keys, IP any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockStoreService)(nil).Commit), ctx, mode, document, signature, option, keys, IP)
}

// Restore mocks base method.
func (m *MockStoreService) Restore(ctx context.Context, archive io.Reader, from, IP string) ([]core.BatchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, archive, from, IP)
	ret0, _ := ret[0].([]core.BatchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockStoreServiceMockRecorder) Restore(ctx, archive, from, IP any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockStoreService)(nil).Restore), ctx, archive, from, IP)
}

// SyncCommitFile mocks base method.
func (m *MockStoreService) SyncCommitFile(ctx context.Context, owner string) (core.SyncStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCommitFile", ctx, owner)
	ret0, _ := ret[0].(core.SyncStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncCommitFile indicates an expected call of SyncCommitFile.
func (mr *MockStoreServiceMockRecorder) SyncCommitFile(ctx, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCommitFile", reflect.TypeOf((*MockStoreService)(nil).SyncCommitFile), ctx, owner)
}

// SyncStatus mocks base method.
func (m *MockStoreService) SyncStatus(ctx context.Context, owner string) (core.SyncStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatus", ctx, owner)
	ret0, _ := ret[0].(core.SyncStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncStatus indicates an expected call of SyncStatus.
func (mr *MockStoreServiceMockRecorder) SyncStatus(ctx, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatus", reflect.TypeOf((*MockStoreService)(nil).SyncStatus), ctx, owner)
}

// ValidateDocument mocks base method.
func (m *MockStoreService) ValidateDocument(ctx context.Context, document, signature string, keys []core.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDocument", ctx, document, signature, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateDocument indicates an expected call of ValidateDocument.
func (mr *MockStoreServiceMockRecorder) ValidateDocument(ctx, document, signature, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDocument", reflect.TypeOf((*MockStoreService)(nil).ValidateDocument), ctx, document, signature, keys)
}

// MockSubscriptionService is a mock of SubscriptionService interface.
type MockSubscriptionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceMockRecorder
}

// MockSubscriptionServiceMockRecorder is the mock recorder for MockSubscriptionService.
type MockSubscriptionServiceMockRecorder struct {
	mock *MockSubscriptionService
}

// NewMockSubscriptionService creates a new mock instance.
func NewMockSubscriptionService(ctrl *gomock.Controller) *MockSubscriptionService {
	mock := &MockSubscriptionService{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService) EXPECT() *MockSubscriptionServiceMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockSubscriptionService) Clean(ctx context.Context, ccid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", ctx, ccid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockSubscriptionServiceMockRecorder) Clean(ctx, ccid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockSubscriptionService)(nil).Clean), ctx, ccid)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionService) DeleteSubscription(ctx context.Context, mode core.CommitMode, document string) (core.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx, mode, document)
	ret0, _ := ret[0].(core.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionServiceMockRecorder) DeleteSubscription(ctx, mode, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionService)(nil).DeleteSubscription), ctx, mode, document)
}

// GetOwnSubscriptions mocks base method.
func (m *MockSubscriptionService) GetOwnSubscriptions(ctx context.Context, owner string) ([]core.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnSubscriptions", ctx, owner)
	ret0, _ := ret[0].([]core.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnSubscriptions indicates an expected call of GetOwnSubscriptions.
func (mr *MockSubscriptionServiceMockRecorder) GetOwnSubscriptions(ctx, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnSubscriptions", reflect.TypeOf((*MockSubscriptionService)(nil).GetOwnSubscriptions), ctx, owner)
}

// GetSubscription mocks base method.
func (m *MockSubscriptionService) GetSubscription(ctx context.Context, id string) (core.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, id)
	ret0, _ := ret[0].(core.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockSubscriptionServiceMockRecorder) GetSubscription(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockSubscriptionService)(nil).GetSubscription), ctx, id)
}

// Subscribe mocks base method.
func (m *MockSubscriptionService) Subscribe(ctx context.Context, mode core.CommitMode, document, signature string) (core.SubscriptionItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, mode, document, signature)
	ret0, _ := ret[0].(core.SubscriptionItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriptionServiceMockRecorder) Subscribe(ctx, mode, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriptionService)(nil).Subscribe), ctx, mode, document, signature)
}

// Unsubscribe mocks base method.
func (m *MockSubscriptionService) Unsubscribe(ctx context.Context, mode core.CommitMode, document string) (core.SubscriptionItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, mode, document)
	ret0, _ := ret[0].(core.SubscriptionItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscriptionServiceMockRecorder) Unsubscribe(ctx, mode, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscriptionService)(nil).Unsubscribe), ctx, mode, document)
}

// UpsertSubscription mocks base method.
func (m *MockSubscriptionService) UpsertSubscription(ctx context.Context, mode core.CommitMode, document, signature string) (core.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSubscription", ctx, mode, document, signature)
	ret0, _ := ret[0].(core.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSubscription indicates an expected call of UpsertSubscription.
func (mr *MockSubscriptionServiceMockRecorder) UpsertSubscription(ctx, mode, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSubscription", reflect.TypeOf((*MockSubscriptionService)(nil).UpsertSubscription), ctx, mode, document, signature)
}

// MockTimelineService is a mock of TimelineService interface.
type MockTimelineService struct {
	ctrl     *gomock.Controller
	recorder *MockTimelineServiceMockRecorder
}

// MockTimelineServiceMockRecorder is the mock recorder for MockTimelineService.
type MockTimelineServiceMockRecorder struct {
	mock *MockTimelineService
}

// NewMockTimelineService creates a new mock instance.
func NewMockTimelineService(ctrl *gomock.Controller) *MockTimelineService {
	mock := &MockTimelineService{ctrl: ctrl}
	mock.recorder = &MockTimelineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimelineService) EXPECT() *MockTimelineServiceMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockTimelineService) Clean(ctx context.Context, ccid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", ctx, ccid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockTimelineServiceMockRecorder) Clean(ctx, ccid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockTimelineService)(nil).Clean), ctx, ccid)
}

// Count mocks base method.
func (m *MockTimelineService) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockTimelineServiceMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockTimelineService)(nil).Count), ctx)
}

// DeleteTimeline mocks base method.
func (m *MockTimelineService) DeleteTimeline(ctx context.Context, mode core.CommitMode, document string) (core.Timeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimeline", ctx, mode, document)
	ret0, _ := ret[0].(core.Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTimeline indicates an expected call of DeleteTimeline.
func (mr *MockTimelineServiceMockRecorder) DeleteTimeline(ctx, mode, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimeline", reflect.TypeOf((*MockTimelineService)(nil).DeleteTimeline), ctx, mode, document)
}

// Event mocks base method.
func (m *MockTimelineService) Event(ctx context.Context, mode core.CommitMode, document, signature string) (core.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event", ctx, mode, document, signature)
	ret0, _ := ret[0].(core.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Event indicates an expected call of Event.
func (mr *MockTimelineServiceMockRecorder) Event(ctx, mode, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockTimelineService)(nil).Event), ctx, mode, document, signature)
}

// GetChunks mocks base method.
func (m *MockTimelineService) GetChunks(ctx context.Context, timelines []string, epoch string) (map[string]core.Chunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunks", ctx, timelines, epoch)
	ret0, _ := ret[0].(map[string]core.Chunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunks indicates an expected call of GetChunks.
func (mr *MockTimelineServiceMockRecorder) GetChunks(ctx, timelines, epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunks", reflect.TypeOf((*MockTimelineService)(nil).GetChunks), ctx, timelines, epoch)
}

// GetImmediateItems mocks base method.
func (m *MockTimelineService) GetImmediateItems(ctx context.Context, timelines []string, since time.Time, limit int) ([]core.TimelineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImmediateItems", ctx, timelines, since, limit)
	ret0, _ := ret[0].([]core.TimelineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImmediateItems indicates an expected call of GetImmediateItems.
func (mr *MockTimelineServiceMockRecorder) GetImmediateItems(ctx, timelines, since, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImmediateItems", reflect.TypeOf((*MockTimelineService)(nil).GetImmediateItems), ctx, timelines, since, limit)
}

// GetImmediateItemsFromSubscription mocks base method.
func (m *MockTimelineService) GetImmediateItemsFromSubscription(ctx context.Context, subscription string, since time.Time, limit int) ([]core.TimelineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImmediateItemsFromSubscription", ctx, subscription, since, limit)
	ret0, _ := ret[0].([]core.TimelineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImmediateItemsFromSubscription indicates an expected call of GetImmediateItemsFromSubscription.
func (mr *MockTimelineServiceMockRecorder) GetImmediateItemsFromSubscription(ctx, subscription, since, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImmediateItemsFromSubscription", reflect.TypeOf((*MockTimelineService)(nil).GetImmediateItemsFromSubscription), ctx, subscription, since, limit)
}

// GetItem mocks base method.
func (m *MockTimelineService) GetItem(ctx context.Context, timeline, id string) (core.TimelineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, timeline, id)
	ret0, _ := ret[0].(core.TimelineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockTimelineServiceMockRecorder) GetItem(ctx, timeline, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockTimelineService)(nil).GetItem), ctx, timeline, id)
}

// GetOwners mocks base method.
func (m *MockTimelineService) GetOwners(ctx context.Context, timelines []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwners", ctx, timelines)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwners indicates an expected call of GetOwners.
func (mr *MockTimelineServiceMockRecorder) GetOwners(ctx, timelines any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwners", reflect.TypeOf((*MockTimelineService)(nil).GetOwners), ctx, timelines)
}

// GetRecentItems mocks base method.
func (m *MockTimelineService) GetRecentItems(ctx context.Context, timelines []string, until time.Time, limit int) ([]core.TimelineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentItems", ctx, timelines, until, limit)
	ret0, _ := ret[0].([]core.TimelineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentItems indicates an expected call of GetRecentItems.
func (mr *MockTimelineServiceMockRecorder) GetRecentItems(ctx, timelines, until, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentItems", reflect.TypeOf((*MockTimelineService)(nil).GetRecentItems), ctx, timelines, until, limit)
}

// GetRecentItemsFromSubscription mocks base method.
func (m *MockTimelineService) GetRecentItemsFromSubscription(ctx context.Context, subscription string, until time.Time, limit int) ([]core.TimelineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentItemsFromSubscription", ctx, subscription, until, limit)
	ret0, _ := ret[0].([]core.TimelineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentItemsFromSubscription indicates an expected call of GetRecentItemsFromSubscription.
func (mr *MockTimelineServiceMockRecorder) GetRecentItemsFromSubscription(ctx, subscription, until, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentItemsFromSubscription", reflect.TypeOf((*MockTimelineService)(nil).GetRecentItemsFromSubscription), ctx, subscription, until, limit)
}

// GetTimeline mocks base method.
func (m *MockTimelineService) GetTimeline(ctx context.Context, key string) (core.Timeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeline", ctx, key)
	ret0, _ := ret[0].(core.Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeline indicates an expected call of GetTimeline.
func (mr *MockTimelineServiceMockRecorder) GetTimeline(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeline", reflect.TypeOf((*MockTimelineService)(nil).GetTimeline), ctx, key)
}

// GetTimelineAutoDomain mocks base method.
func (m *MockTimelineService) GetTimelineAutoDomain(ctx context.Context, timelineID string) (core.Timeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimelineAutoDomain", ctx, timelineID)
	ret0, _ := ret[0].(core.Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimelineAutoDomain indicates an expected call of GetTimelineAutoDomain.
func (mr *MockTimelineServiceMockRecorder) GetTimelineAutoDomain(ctx, timelineID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimelineAutoDomain", reflect.TypeOf((*MockTimelineService)(nil).GetTimelineAutoDomain), ctx, timelineID)
}

// ListLocalRecentlyRemovedItems mocks base method.
func (m *MockTimelineService) ListLocalRecentlyRemovedItems(ctx context.Context, timelines []string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocalRecentlyRemovedItems", ctx, timelines)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocalRecentlyRemovedItems indicates an expected call of ListLocalRecentlyRemovedItems.
func (mr *MockTimelineServiceMockRecorder) ListLocalRecentlyRemovedItems(ctx, timelines any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocalRecentlyRemovedItems", reflect.TypeOf((*MockTimelineService)(nil).ListLocalRecentlyRemovedItems), ctx, timelines)
}

// ListTimelineByAuthor mocks base method.
func (m *MockTimelineService) ListTimelineByAuthor(ctx context.Context, author string) ([]core.Timeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimelineByAuthor", ctx, author)
	ret0, _ := ret[0].([]core.Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTimelineByAuthor indicates an expected call of ListTimelineByAuthor.
func (mr *MockTimelineServiceMockRecorder) ListTimelineByAuthor(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimelineByAuthor", reflect.TypeOf((*MockTimelineService)(nil).ListTimelineByAuthor), ctx, author)
}

// ListTimelineBySchema mocks base method.
func (m *MockTimelineService) ListTimelineBySchema(ctx context.Context, schema string) ([]core.Timeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimelineBySchema", ctx, schema)
	ret0, _ := ret[0].([]core.Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTimelineBySchema indicates an expected call of ListTimelineBySchema.
func (mr *MockTimelineServiceMockRecorder) ListTimelineBySchema(ctx, schema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimelineBySchema", reflect.TypeOf((*MockTimelineService)(nil).ListTimelineBySchema), ctx, schema)
}

// ListTimelineSubscriptions mocks base method.
func (m *MockTimelineService) ListTimelineSubscriptions(ctx context.Context) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimelineSubscriptions", ctx)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTimelineSubscriptions indicates an expected call of ListTimelineSubscriptions.
func (mr *MockTimelineServiceMockRecorder) ListTimelineSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimelineSubscriptions", reflect.TypeOf((*MockTimelineService)(nil).ListTimelineSubscriptions), ctx)
}

// LoadChunkBody mocks base method.
func (m *MockTimelineService) LoadChunkBody(ctx context.Context, query map[string]string) (map[string]core.Chunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadChunkBody", ctx, query)
	ret0, _ := ret[0].(map[string]core.Chunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadChunkBody indicates an expected call of LoadChunkBody.
func (mr *MockTimelineServiceMockRecorder) LoadChunkBody(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadChunkBody", reflect.TypeOf((*MockTimelineService)(nil).LoadChunkBody), ctx, query)
}

// LookupChunkItr mocks base method.
func (m *MockTimelineService) LookupChunkItr(ctx context.Context, timeliens []string, epoch string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupChunkItr", ctx, timeliens, epoch)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupChunkItr indicates an expected call of LookupChunkItr.
func (mr *MockTimelineServiceMockRecorder) LookupChunkItr(ctx, timeliens, epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupChunkItr", reflect.TypeOf((*MockTimelineService)(nil).LookupChunkItr), ctx, timeliens, epoch)
}

// NormalizeTimelineID mocks base method.
func (m *MockTimelineService) NormalizeTimelineID(ctx context.Context, timeline string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NormalizeTimelineID", ctx, timeline)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NormalizeTimelineID indicates an expected call of NormalizeTimelineID.
func (mr *MockTimelineServiceMockRecorder) NormalizeTimelineID(ctx, timeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NormalizeTimelineID", reflect.TypeOf((*MockTimelineService)(nil).NormalizeTimelineID), ctx, timeline)
}

// PostItem mocks base method.
func (m *MockTimelineService) PostItem(ctx context.Context, timeline string, item core.TimelineItem, document, signature string) (core.TimelineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostItem", ctx, timeline, item, document, signature)
	ret0, _ := ret[0].(core.TimelineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostItem indicates an expected call of PostItem.
func (mr *MockTimelineServiceMockRecorder) PostItem(ctx, timeline, item, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostItem", reflect.TypeOf((*MockTimelineService)(nil).PostItem), ctx, timeline, item, document, signature)
}

// PublishEvent mocks base method.
func (m *MockTimelineService) PublishEvent(ctx context.Context, event core.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockTimelineServiceMockRecorder) PublishEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockTimelineService)(nil).PublishEvent), ctx, event)
}

// Query mocks base method.
func (m *MockTimelineService) Query(ctx context.Context, timelineID, schema, owner, author string, until time.Time, limit int) ([]core.TimelineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, timelineID, schema, owner, author, until, limit)
	ret0, _ := ret[0].([]core.TimelineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockTimelineServiceMockRecorder) Query(ctx, timelineID, schema, owner, author, until, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTimelineService)(nil).Query), ctx, timelineID, schema, owner, author, until, limit)
}

// Realtime mocks base method.
func (m *MockTimelineService) Realtime(ctx context.Context, request <-chan []string, response chan<- core.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Realtime", ctx, request, response)
}

// Realtime indicates an expected call of Realtime.
func (mr *MockTimelineServiceMockRecorder) Realtime(ctx, request, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Realtime", reflect.TypeOf((*MockTimelineService)(nil).Realtime), ctx, request, response)
}

// RemoveItemsByResourceID mocks base method.
func (m *MockTimelineService) RemoveItemsByResourceID(ctx context.Context, resourceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItemsByResourceID", ctx, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItemsByResourceID indicates an expected call of RemoveItemsByResourceID.
func (mr *MockTimelineServiceMockRecorder) RemoveItemsByResourceID(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItemsByResourceID", reflect.TypeOf((*MockTimelineService)(nil).RemoveItemsByResourceID), ctx, resourceID)
}

// Retract mocks base method.
func (m *MockTimelineService) Retract(ctx context.Context, mode core.CommitMode, document, signature string) (core.TimelineItem, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retract", ctx, mode, document, signature)
	ret0, _ := ret[0].(core.TimelineItem)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Retract indicates an expected call of Retract.
func (mr *MockTimelineServiceMockRecorder) Retract(ctx, mode, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retract", reflect.TypeOf((*MockTimelineService)(nil).Retract), ctx, mode, document, signature)
}

// UpdateMetrics mocks base method.
func (m *MockTimelineService) UpdateMetrics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMetrics")
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockTimelineServiceMockRecorder) UpdateMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockTimelineService)(nil).UpdateMetrics))
}

// UpsertTimeline mocks base method.
func (m *MockTimelineService) UpsertTimeline(ctx context.Context, mode core.CommitMode, document, signature string) (core.Timeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTimeline", ctx, mode, document, signature)
	ret0, _ := ret[0].(core.Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertTimeline indicates an expected call of UpsertTimeline.
func (mr *MockTimelineServiceMockRecorder) UpsertTimeline(ctx, mode, document, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTimeline", reflect.TypeOf((*MockTimelineService)(nil).UpsertTimeline), ctx, mode, document, signature)
}

// MockJobService is a mock of JobService interface.
type MockJobService struct {
	ctrl     *gomock.Controller
	recorder *MockJobServiceMockRecorder
}

// MockJobServiceMockRecorder is the mock recorder for MockJobService.
type MockJobServiceMockRecorder struct {
	mock *MockJobService
}

// NewMockJobService creates a new mock instance.
func NewMockJobService(ctrl *gomock.Controller) *MockJobService {
	mock := &MockJobService{ctrl: ctrl}
	mock.recorder = &MockJobServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobService) EXPECT() *MockJobServiceMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockJobService) Cancel(ctx context.Context, id string) (core.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, id)
	ret0, _ := ret[0].(core.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockJobServiceMockRecorder) Cancel(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockJobService)(nil).Cancel), ctx, id)
}

// Complete mocks base method.
func (m *MockJobService) Complete(ctx context.Context, id, status, result string) (core.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", ctx, id, status, result)
	ret0, _ := ret[0].(core.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Complete indicates an expected call of Complete.
func (mr *MockJobServiceMockRecorder) Complete(ctx, id, status, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockJobService)(nil).Complete), ctx, id, status, result)
}

// Create mocks base method.
func (m *MockJobService) Create(ctx context.Context, requester, typ, payload string, scheduled time.Time) (core.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, requester, typ, payload, scheduled)
	ret0, _ := ret[0].(core.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockJobServiceMockRecorder) Create(ctx, requester, typ, payload, scheduled any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobService)(nil).Create), ctx, requester, typ, payload, scheduled)
}

// Dequeue mocks base method.
func (m *MockJobService) Dequeue(ctx context.Context) (*core.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue", ctx)
	ret0, _ := ret[0].(*core.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockJobServiceMockRecorder) Dequeue(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockJobService)(nil).Dequeue), ctx)
}

// List mocks base method.
func (m *MockJobService) List(ctx context.Context, requester string) ([]core.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, requester)
	ret0, _ := ret[0].([]core.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockJobServiceMockRecorder) List(ctx, requester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockJobService)(nil).List), ctx, requester)
}

// MockNotificationService is a mock of NotificationService interface.
type MockNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceMockRecorder
}

// MockNotificationServiceMockRecorder is the mock recorder for MockNotificationService.
type MockNotificationServiceMockRecorder struct {
	mock *MockNotificationService
}

// NewMockNotificationService creates a new mock instance.
func NewMockNotificationService(ctrl *gomock.Controller) *MockNotificationService {
	mock := &MockNotificationService{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationService) EXPECT() *MockNotificationServiceMockRecorder {
	return m.recorder
}

// GetAllSubscriptions mocks base method.
func (m *MockNotificationService) GetAllSubscriptions(ctx context.Context) ([]core.NotificationSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubscriptions", ctx)
	ret0, _ := ret[0].([]core.NotificationSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubscriptions indicates an expected call of GetAllSubscriptions.
func (mr *MockNotificationServiceMockRecorder) GetAllSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubscriptions", reflect.TypeOf((*MockNotificationService)(nil).GetAllSubscriptions), ctx)
}

// Subscribe mocks base method.
func (m *MockNotificationService) Subscribe(ctx context.Context, notification core.NotificationSubscription) (core.NotificationSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, notification)
	ret0, _ := ret[0].(core.NotificationSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockNotificationServiceMockRecorder) Subscribe(ctx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNotificationService)(nil).Subscribe), ctx, notification)
}
