version: "3"

services:
  # main components
  ccgateway:
    build:
      context: .
      dockerfile: ./cmd/gateway/Dockerfile
    restart: always
    links:
      - db
      - redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ./config:/etc/concurrent/:ro
    networks:
      - external
      - internal

  ccapi:
    build:
      context: .
      dockerfile: ./cmd/api/Dockerfile
    restart: always
    links:
      - db
      - redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./config:/etc/concurrent/:ro
    networks:
      - external
      - internal

  ccwebui:
    build:
      context: .
      dockerfile: ./web/Dockerfile
    restart: always
    ports:
      - "8001:80"
    networks:
      - internal

  db:
    restart: always
    image: postgres
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 5s
      retries: 20
    volumes:
      - ./_composeData/db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - "POSTGRES_PASSWORD=postgres"
      - "POSTGRES_DB=concurrent"
    networks:
      - internal

  redis:
    restart: always
    image: redis
    volumes:
      - ./_composeData/redis:/data
    healthcheck:
      test: "redis-cli ping"
      interval: 5s
      retries: 20
    ports:
      - "6379:6379"
    networks:
      - internal

  memcached:
    image: memcached
    ports:
      - "11211:11211"
    networks:
      - internal

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./dev/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    networks:
      - external
      - internal

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./dev/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"
    networks:
      - external
      - internal

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./dev/tempo.yaml:/etc/tempo.yaml
    networks:
      - internal

networks:
  external:
  internal:
    internal: true
  
