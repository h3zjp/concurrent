// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_schema is a generated GoMock package.
package mock_schema

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// IDToUrl mocks base method.
func (m *MockService) IDToUrl(ctx context.Context, id uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDToUrl", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IDToUrl indicates an expected call of IDToUrl.
func (mr *MockServiceMockRecorder) IDToUrl(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDToUrl", reflect.TypeOf((*MockService)(nil).IDToUrl), ctx, id)
}

// UrlToID mocks base method.
func (m *MockService) UrlToID(ctx context.Context, url string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UrlToID", ctx, url)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UrlToID indicates an expected call of UrlToID.
func (mr *MockServiceMockRecorder) UrlToID(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UrlToID", reflect.TypeOf((*MockService)(nil).UrlToID), ctx, url)
}
