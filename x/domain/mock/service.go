// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"
	time "time"

	core "github.com/totegamma/concurrent/x/core"
	domain "github.com/totegamma/concurrent/x/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockService) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, id)
}

// GetByCCID mocks base method.
func (m *MockService) GetByCCID(ctx context.Context, key string) (core.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCCID", ctx, key)
	ret0, _ := ret[0].(core.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCCID indicates an expected call of GetByCCID.
func (mr *MockServiceMockRecorder) GetByCCID(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCCID", reflect.TypeOf((*MockService)(nil).GetByCCID), ctx, key)
}

// GetByFQDN mocks base method.
func (m *MockService) GetByFQDN(ctx context.Context, key string) (core.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFQDN", ctx, key)
	ret0, _ := ret[0].(core.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFQDN indicates an expected call of GetByFQDN.
func (mr *MockServiceMockRecorder) GetByFQDN(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFQDN", reflect.TypeOf((*MockService)(nil).GetByFQDN), ctx, key)
}

// Hello mocks base method.
func (m *MockService) Hello(ctx context.Context, newcomer domain.Profile) (domain.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", ctx, newcomer)
	ret0, _ := ret[0].(domain.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello.
func (mr *MockServiceMockRecorder) Hello(ctx, newcomer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockService)(nil).Hello), ctx, newcomer)
}

// List mocks base method.
func (m *MockService) List(ctx context.Context) ([]core.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]core.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockService)(nil).List), ctx)
}

// SayHello mocks base method.
func (m *MockService) SayHello(ctx context.Context, target string) (core.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHello", ctx, target)
	ret0, _ := ret[0].(core.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockServiceMockRecorder) SayHello(ctx, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockService)(nil).SayHello), ctx, target)
}

// Update mocks base method.
func (m *MockService) Update(ctx context.Context, host core.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, host)
}

// UpdateScrapeTime mocks base method.
func (m *MockService) UpdateScrapeTime(ctx context.Context, id string, scrapeTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScrapeTime", ctx, id, scrapeTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScrapeTime indicates an expected call of UpdateScrapeTime.
func (mr *MockServiceMockRecorder) UpdateScrapeTime(ctx, id, scrapeTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScrapeTime", reflect.TypeOf((*MockService)(nil).UpdateScrapeTime), ctx, id, scrapeTime)
}

// Upsert mocks base method.
func (m *MockService) Upsert(ctx context.Context, host core.Domain) (core.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, host)
	ret0, _ := ret[0].(core.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServiceMockRecorder) Upsert(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockService)(nil).Upsert), ctx, host)
}
